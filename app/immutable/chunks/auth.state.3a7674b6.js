import{s as u,A as v}from"./client.8867cdbe.js";import{w as S}from"./index.d0c06b92.js";import{Z as w}from"./scheduler.e91d0d47.js";class T{set(s,t){try{return localStorage.setItem(s,JSON.stringify(t)),!0}catch(c){return console.error("Failed to set data in localStorage",c),!1}}get(s){try{const t=localStorage.getItem(s);return t?JSON.parse(t):null}catch(t){return console.error("Failed to get data from localStorage",t),null}}delete(s){try{return localStorage.removeItem(s),!0}catch(t){return console.error("Failed to delete data from localStorage",t),!1}}exists(s){return localStorage.getItem(s)!==null}clear(){try{return localStorage.clear(),!0}catch(s){return console.error("Failed to clear localStorage",s),!1}}}const P=new T,_=()=>{const e=S(),s=S([]),t=n=>{const g={...n,duration:n.duration===void 0?7e3:n.duration};s.update(h=>(h.push(g),h))};let c=!1;const p=()=>{const n=w(s);if(n!=null&&n.length){const g=w(s)[0];e.set(g),setTimeout(()=>{n.shift(),s.set(n),p()},g.duration)}else e.set(null),c=!1};return s.subscribe(()=>{c||(c=!0,p())}),{store:{alert:e},actions:{log:t,reset:()=>{e.set(null),s.set([])}}}},A=_(),{APP_BASE_URL:y,SUPABASE_URL:U}=v,{actions:{log:a}}=A,R=()=>{const e=S(!1),s=S(null),t=S(null),c=U.split(".")[0].split("//")[1].split(":")[0],p=()=>{if(w(s))return Promise.resolve(!0);{const r=P.get(`sb-${c}-auth-token`);if(r){const{user:o}=r;o&&s.set(o)}}return Promise.resolve(!!w(s))},j=async(r,o)=>{e.set(!0);try{const i={email:r,password:o},{data:l,error:d}=await u.auth.signInWithPassword(i);if(d)return a({message:"Sign credentials in failed, please try again.",state:"error"}),e.set(!1),Promise.reject("Sign in failed");t.set(null),s.set(null);const{session:f,user:m}=l;return f&&t.set(f),m&&s.set(m),P.set(`sb-${c}-auth-token`,f),e.set(!1),a({message:"Sign in successful ... redirecting",state:"success"}),Promise.resolve({success:!0,message:"Sign In Successful",data:l})}catch{return a({message:"Sign in failed",state:"error"}),e.set(!1),Promise.reject("Sign in failed")}},n=async()=>{e.set(!0);try{const{error:r}=await u.auth.signOut({scope:"global"});return t.set(null),s.set(null),r?(a({message:"Sign out failed",state:"error"}),e.set(!1),Promise.reject("Sign out failed")):(P.delete(`sb-${c}-auth-token`),e.set(!1),Promise.resolve({success:!0,message:"Sign Out Successful"}))}catch{return a({message:"Sign out failed",state:"error"}),e.set(!1),Promise.reject("Sign out failed")}},g=async(r,o)=>{e.set(!0);try{const i={email:r,password:o,options:{emailRedirectTo:y}},{data:l,error:d}=await u.auth.signUp(i);return d?(a({message:"Sign up failed",state:"error"}),e.set(!1),Promise.reject("Sign up failed")):(P.delete(`sb-${c}-auth-token`),e.set(!1),a({message:"Sign up successful, check your email for an account confirmation link",state:"success"}),Promise.resolve({success:!0,message:"signUp Successful",data:l}))}catch{return a({message:"Sign up failed",state:"error"}),Promise.reject("Sign up failed")}},h=async r=>{e.set(!1);try{const o={redirectTo:`${y}/auth/update-password`},{data:i,error:l}=await u.auth.resetPasswordForEmail(r,o);return l?(a({message:"Trigger password reset failed",state:"error"}),e.set(!1),Promise.reject("Trigger password reset failed")):(e.set(!1),a({message:"Trigger password reset successful, check your email for password reset link",state:"success"}),Promise.resolve({success:!0,message:"Trigger password reset successful",data:i}))}catch{return a({message:"Trigger password reset failed",state:"error"}),e.set(!1),Promise.reject("Trigger password reset failed")}},b=async r=>{var o,i;e.set(!0);try{const{data:l,error:d}=await u.auth.getSession();if(d)return a({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed");await u.auth.setSession({access_token:((o=l.session)==null?void 0:o.access_token)||"",refresh_token:((i=l.session)==null?void 0:i.refresh_token)||""});const f={emailRedirectTo:y},{data:m,error:I}=await u.auth.updateUser({password:r},f);if(I)return a({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed");const{user:k}=m;return k&&s.set(k),e.set(!1),a({message:"Success, your password has been reset.",state:"success"}),Promise.resolve({success:!0,message:"Password Reset Successful",data:m})}catch{return a({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed")}};return u.auth.onAuthStateChange((r,o)=>{console.log("Listen on Auth:",r,o)}),{store:{loading:e,currentUser:s,currentSession:t},actions:{isAuthenticated:p,signIn:j,signOut:n,signUp:g,triggerResetPassword:h,resetPassword:b}}},$=R();export{$ as a,A as b};
