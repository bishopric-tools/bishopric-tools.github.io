var S=Object.defineProperty;var x=(t,r,e)=>r in t?S(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e;var P=(t,r,e)=>(x(t,typeof r!="symbol"?r+"":r,e),e);import{t as I,a as R}from"./index.8dc6213e.js";import{S as M}from"./scheduler.b53f554c.js";import{s as l}from"./client.2b60bbb0.js";import{w as G}from"./index.adf7635c.js";function ee(t){return(t==null?void 0:t.length)!==void 0?t:Array.from(t)}function re(t,r){I(t,1,1,()=>{r.delete(t.key)})}function te(t,r,e,a,s,o,i,h,c,_,N,k){let f=t.length,y=o.length,p=f;const j={};for(;p--;)j[t[p].key]=p;const w=[],$=new Map,A=new Map,C=[];for(p=y;p--;){const n=k(s,o,p),u=e(n);let m=i.get(u);m?a&&C.push(()=>m.p(n,r)):(m=_(u,n),m.c()),$.set(u,w[p]=m),u in j&&A.set(u,Math.abs(p-j[u]))}const D=new Set,F=new Set;function E(n){R(n,1),n.m(h,N),i.set(n.key,n),N=n.first,y--}for(;f&&y;){const n=w[y-1],u=t[f-1],m=n.key,g=u.key;n===u?(N=n.first,f--,y--):$.has(g)?!i.has(m)||D.has(m)?E(n):F.has(g)?f--:A.get(m)>A.get(g)?(F.add(m),E(n)):(D.add(g),f--):(c(u,i),f--)}for(;f--;){const n=t[f];$.has(n.key)||c(n,i)}for(;y;)E(w[y-1]);return M(C),w}var d={};(function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.throwTypescriptError=t.throwError=void 0;const r=a=>{throw new Error(`[svelte-preprocess] ${a}`)};t.throwError=r;const e=()=>{(0,t.throwError)("Encountered type error")};t.throwTypescriptError=e})(d);const b=(t,r)=>{const{subscribe:e,set:a}=G(t),s=G(!0),o=async()=>{s.set(!0);const i=await r();a(i),s.set(!1)};return r().then(i=>a(i)).catch(i=>d.throwError(i)).finally(()=>{s.set(!1)}),{subscribe:e,reload:o,reset:()=>a([]),loading:s}};class v{constructor(r){P(this,"tableName");this.tableName=r}async bulkCreate(r){try{const{data:e,error:a}=await l.from(this.tableName).insert(r).select();return a?(console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(e)}catch(e){return console.error(e),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async bulkUpdate(r,e){try{const{data:a,error:s}=await l.from(this.tableName).upsert(r,e).select();return s?(console.error(s),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(a)}catch(a){return console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async getAll(){try{const{data:r,error:e}=await l.from(this.tableName).select();return e?(console.error(e),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)):Promise.resolve(r)}catch(r){return console.error(r),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)}}async bulkDelete(r){try{const{error:e}=await l.from(this.tableName).delete().in("id",r);return e?(console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)):Promise.resolve()}catch(e){return console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)}}}class T extends v{constructor(){super("users")}}const U=new T;class W{constructor(){P(this,"tableName","permission_groups")}async bulkCreate(r){try{const{data:e,error:a}=await l.from(this.tableName).insert(r).select();return a?(console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(e)}catch(e){return console.error(e),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async bulkUpdate(r,e){try{const{data:a,error:s}=await l.from(this.tableName).upsert(r,e).select();return s?(console.error(s),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(a)}catch(a){return console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async getAll(){try{const{data:r,error:e}=await l.from(this.tableName).select();return e?(console.error(e),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)):Promise.resolve(r)}catch(r){return console.error(r),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)}}async bulkDelete(r){try{const{error:e}=await l.from(this.tableName).delete().in("id",r);return e?(console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)):Promise.resolve()}catch(e){return console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)}}}const O=new W;class B extends v{constructor(){super("permissions")}async getAllWithGroupDetails(){try{const{data:r,error:e}=await l.from(this.tableName).select(`
					id, 
					description, 
					sort_index, 
					uuid, 
					created_at, 
					created_by_id, 
					updated_at, 
					updated_by_id, 
					permission_groups(id, name)
				`).order("sort_index",{ascending:!0});if(e)return console.error(e),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`);const a=r.map(s=>{var i,h;const o=s;return{id:o.id,description:o.description,sort_index:o.sort_index,group_id:(i=o.permission_groups)==null?void 0:i.id,group_name:(h=o.permission_groups)==null?void 0:h.name,uuid:o.uuid,created_by_id:o.created_by_id,created_at:o.created_at,updated_by_id:o.updated_by_id,updated_at:o.updated_at}});return Promise.resolve(a)}catch(r){return console.error(r),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)}}}const H=new B;class q extends v{constructor(){super("roles")}async getAllWithGroupDetails(){try{const{data:r,error:e}=await l.from(this.tableName).select(`
					id, 
					name, 
					sort_index, 
					uuid, 
					created_at, 
					created_by_id, 
					updated_at, 
					updated_by_id, 
					role_groups(id, name)
				`).order("sort_index",{ascending:!0});if(e)return console.error(e),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`);const a=r.map(s=>{var i,h;const o=s;return{id:o.id,name:o.name,sort_index:o.sort_index,group_id:(i=o.role_groups)==null?void 0:i.id,group_name:(h=o.role_groups)==null?void 0:h.name,uuid:o.uuid,created_by_id:o.created_by_id,created_at:o.created_at,updated_by_id:o.updated_by_id,updated_at:o.updated_at}});return Promise.resolve(a)}catch(r){return console.error(r),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)}}}const z=new q;class J{constructor(){P(this,"tableName","role_groups")}async bulkCreate(r){try{const{data:e,error:a}=await l.from(this.tableName).insert(r).select();return a?(console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(e)}catch(e){return console.error(e),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async bulkUpdate(r,e){try{const{data:a,error:s}=await l.from(this.tableName).upsert(r,e).select();return s?(console.error(s),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)):Promise.resolve(a)}catch(a){return console.error(a),Promise.reject(`Creation of ${this.tableName} records failed, please try again.`)}}async getAll(){try{const{data:r,error:e}=await l.from(this.tableName).select();return e?(console.error(e),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)):Promise.resolve(r)}catch(r){return console.error(r),Promise.reject(`Fetch of ${this.tableName} records failed, please try again.`)}}async bulkDelete(r){try{const{error:e}=await l.from(this.tableName).delete().in("id",r);return e?(console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)):Promise.resolve()}catch(e){return console.error(e),Promise.reject(`Deletion of ${this.tableName} record failed, please try again.`)}}}const K=new J,L=()=>{const t="Failed to fetch data, please refresh browser and try again",r=b([],async()=>{try{return await U.getAll()}catch{return d.throwError(t)}}),e=b([],async()=>{try{return await O.getAll()}catch{return d.throwError(t)}}),a=b([],async()=>{try{return H.getAllWithGroupDetails()}catch{return d.throwError(t)}}),s=b([],async()=>{try{return await K.getAll()}catch{return d.throwError(t)}}),o=b([],async()=>{try{return z.getAllWithGroupDetails()}catch{return d.throwError(t)}}),i=b([],async()=>{try{const{data:c,error:_}=await l.from("role_permissions").select("*");return _?d.throwError(t):c}catch{return d.throwError(t)}}),h=b([],async()=>{try{const{data:c,error:_}=await l.from("user_roles").select("*");return _?d.throwError(t):c}catch{return d.throwError(t)}});return{store:{users:r,permissionGroups:e,permissions:a,roleGroups:s,roles:o,rolePermissions:i,userRoles:h}}},ae=L();export{H as a,z as b,K as c,U as d,ee as e,re as o,O as p,ae as r,te as u};
