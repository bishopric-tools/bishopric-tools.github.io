import{A as b,s as u}from"./client.3f1dd265.js";import{w as S}from"./index.d5413678.js";import{$ as P}from"./scheduler.5ee162ca.js";class v{set(s,t){try{return localStorage.setItem(s,JSON.stringify(t)),!0}catch(n){return console.error("Failed to set data in localStorage",n),!1}}get(s){try{const t=localStorage.getItem(s);return t?JSON.parse(t):null}catch(t){return console.error("Failed to get data from localStorage",t),null}}delete(s){try{return localStorage.removeItem(s),!0}catch(t){return console.error("Failed to delete data from localStorage",t),!1}}exists(s){return localStorage.getItem(s)!==null}clear(){try{return localStorage.clear(),!0}catch(s){return console.error("Failed to clear localStorage",s),!1}}}const p=new v,T=()=>{const e=S(),s=S([]),t=c=>{const g={...c,duration:c.duration===void 0?7e3:c.duration};s.update(w=>(w.push(g),w))};let n=!1;const h=()=>{const c=P(s);if(c!=null&&c.length){const g=P(s)[0];e.set(g),setTimeout(()=>{c.shift(),s.set(c),h()},g.duration)}else e.set(null),n=!1};return s.subscribe(()=>{n||(n=!0,h())}),{store:{alert:e},actions:{log:t,reset:()=>{e.set(null),s.set([])}}}},U=T(),{APP_BASE_URL:y,SUPABASE_URL:_}=b,{actions:{log:r}}=U,A=()=>{const e=S(!1),s=S(null),t=S(null),n=_.split(".")[0].split("//")[1].split(":")[0];return{store:{loading:e,currentUser:s,currentSession:t},actions:{isAuthenticated:()=>{if(P(s))return Promise.resolve(!0);{const a=p.get(`sb-${n}-auth-token`);if(a){const{user:o}=a;o&&s.set(o)}}return Promise.resolve(!!P(s))},signIn:async(a,o)=>{e.set(!0);try{const i={email:a,password:o},{data:l,error:d}=await u.auth.signInWithPassword(i);if(d)return r({message:"Sign credentials in failed, please try again.",state:"error"}),e.set(!1),Promise.reject("Sign in failed");t.set(null),s.set(null);const{session:f,user:m}=l;return f&&t.set(f),m&&s.set(m),p.set(`sb-${n}-auth-token`,f),e.set(!1),r({message:"Sign in successful ... redirecting",state:"success"}),Promise.resolve({success:!0,message:"Sign In Successful",data:l})}catch{return r({message:"Sign in failed",state:"error"}),e.set(!1),Promise.reject("Sign in failed")}},signOut:async()=>{e.set(!0);try{const{error:a}=await u.auth.signOut({scope:"global"});return t.set(null),s.set(null),a?(r({message:"Sign out failed",state:"error"}),e.set(!1),Promise.reject("Sign out failed")):(p.delete(`sb-${n}-auth-token`),e.set(!1),Promise.resolve({success:!0,message:"Sign Out Successful"}))}catch{return r({message:"Sign out failed",state:"error"}),e.set(!1),Promise.reject("Sign out failed")}},signUp:async(a,o)=>{e.set(!0);try{const i={email:a,password:o,options:{emailRedirectTo:y}},{data:l,error:d}=await u.auth.signUp(i);return d?(r({message:"Sign up failed",state:"error"}),e.set(!1),Promise.reject("Sign up failed")):(p.delete(`sb-${n}-auth-token`),e.set(!1),r({message:"Sign up successful, check your email for an account confirmation link",state:"success"}),Promise.resolve({success:!0,message:"signUp Successful",data:l}))}catch{return r({message:"Sign up failed",state:"error"}),Promise.reject("Sign up failed")}},triggerResetPassword:async a=>{e.set(!1);try{const o={redirectTo:`${y}/auth/update-password`},{data:i,error:l}=await u.auth.resetPasswordForEmail(a,o);return l?(r({message:"Trigger password reset failed",state:"error"}),e.set(!1),Promise.reject("Trigger password reset failed")):(e.set(!1),r({message:"Trigger password reset successful, check your email for password reset link",state:"success"}),Promise.resolve({success:!0,message:"Trigger password reset successful",data:i}))}catch{return r({message:"Trigger password reset failed",state:"error"}),e.set(!1),Promise.reject("Trigger password reset failed")}},resetPassword:async a=>{var o,i;e.set(!0);try{const{data:l,error:d}=await u.auth.getSession();if(d)return r({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed");await u.auth.setSession({access_token:((o=l.session)==null?void 0:o.access_token)||"",refresh_token:((i=l.session)==null?void 0:i.refresh_token)||""});const f={emailRedirectTo:y},{data:m,error:I}=await u.auth.updateUser({password:a},f);if(I)return r({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed");const{user:j}=m;return j&&s.set(j),e.set(!1),r({message:"Success, your password has been reset.",state:"success"}),Promise.resolve({success:!0,message:"Password Reset Successful",data:m})}catch{return r({message:"Password reset failed",state:"error"}),e.set(!1),Promise.reject("Password reset failed")}}}}},L=A();export{L as a,U as b};
